// Generated by CoffeeScript 2.7.0
  var EKMDP, EKMDP_RemoveItemAll, ekmdp;

  EKMDP_RemoveItemAll = function(_arr, _val) {
    var i;
    i = 0;
    while (i < _arr.length) {
      if (_arr[i] === _val) {
        _arr.splice(i, 1);
      } else {
        ++i;
      }
    }
    return _arr;
  };

  EKMDP = function() {
    var EKMDP_Field, __s, _i, _s, j, k, l, len, m, n, ref, ref1, ref2, ref3, ref4;
    EKMDP_Field = document.createElement("div");
    EKMDP_Field.id = "_ekmdp_field";
    document.body.appendChild(EKMDP_Field);
    EKMDP_Field.innerHTML += "<span> Ensatone - KMD - Pseudocode (EKMDP) 1.0v <br> 2022 Yangon, Burma <br> Made by Shinn Thant Htoon@Ensatone <br> Result :  </span>";
    this._variables = {};
    this._variables["break"] = false;
    this._script = "";
    ref = document.querySelectorAll("script");
    for (j = 0, len = ref.length; j < len; j++) {
      __s = ref[j];
      if (__s.getAttribute("type") === "ekmdp" || __s.getAttribute("type") === "text/ekmdp") {
        this._script += __s.innerHTML;
      }
    }
    this.__script = "";
    this._sm = false;
    this.__types = {};
    this._stamps = [];
    this.__stamps = {};
    this._if_value = false;
    this._ltok = function(_t, _arr) {
      var _a, k, len1;
      this._token = _t;
      for (k = 0, len1 = _arr.length; k < len1; k++) {
        _a = _arr[k];
        this._token = this._token.split(_a).join(" " + _a + " ");
      }
      return this._token;
    };
    this._pvar = function(_v) {
      return _v;
    };
    for (_s = k = 0, ref1 = this._script.length; (0 <= ref1 ? k < ref1 : k > ref1); _s = 0 <= ref1 ? ++k : --k) {
      if (this._script[_s] === "\"" && this._script[_s - 1] !== "\\") {
        if (this._sm === false) {
          this._sm = true;
        } else {
          this._sm = false;
        }
      }
      if (this._sm === false) {
        this.__script += this._script[_s];
      } else {
        if (this._script[_s] === " ") {
          this.__script += "\\s";
        } else {
          this.__script += this._script[_s];
        }
      }
    }
    this._script = this.__script;
    this.__script = void 0;
    this._pt = 0;
    this._script = this._script.split("\r\n").join(" ").split("\n").join(" ; ").split(" ");
    this.__script = "";
    for (_s = l = 0, ref2 = this._script.length; (0 <= ref2 ? l < ref2 : l > ref2); _s = 0 <= ref2 ? ++l : --l) {
      if (this._script[_s].charAt(0) !== "\"") {
        this._scache = "";
        for (_i = m = 0, ref3 = this._script[_s].length; (0 <= ref3 ? m < ref3 : m > ref3); _i = 0 <= ref3 ? ++m : --m) {
          if (this._script[_s].charAt(_i) === ">" && this._script[_s].charAt(_i + 1) !== "=") {
            this._scache += ">>";
          } else if (this._script[_s].charAt(_i) === "<" && this._script[_s].charAt(_i + 1) !== "=") {
            this._scache += "<<";
          } else if (this._script[_s].charAt(_i) === "=" && this._script[_s].charAt(_i - 1) !== "=" && this._script[_s].charAt(_i - 1) !== "<" && this._script[_s].charAt(_i - 1) !== ">" && this._script[_s].charAt(_i + 1) !== "=") {
            this._scache += "=>";
          } else {
            this._scache += this._script[_s].charAt(_i);
          }
        }
        this._script[_s] = this._scache;
        this._scache = this._ltok(this._script[_s], [">=", "<=", ">>", "<<", "=>", "!=", "==", "+", "-", "*", "/", "%", "(", ")"]);
        this._scache = this._scache.split("<<").join("<").split(">>").join(">").split("=>").join("=");
        this.__script += " " + this._scache + " ";
      } else {
        this.__script += this._script[_s];
      }
    }
    this._script = this.__script.split(" ");
    this.__script = void 0;
    this._script = EKMDP_RemoveItemAll(this._script, "");
    for (_s = n = 0, ref4 = this._script.length; (0 <= ref4 ? n < ref4 : n > ref4); _s = 0 <= ref4 ? ++n : --n) {
      if (this._script[_s].charAt(0) !== "\"") {
        this._script[_s] = this._script[_s].toLowerCase();
      }
    }
    this._lex = function() {
      var _l, o, ref5, results;
      results = [];
      for (_l = o = 0, ref5 = this._script.length; (0 <= ref5 ? o < ref5 : o > ref5); _l = 0 <= ref5 ? ++o : --o) {
        if (((this._script[_l] === "if" || this._script[_l] === "while") && this._script[_l - 1] !== "end") || (this._script[_l] === "otherwise" && this._script[_l + 1] !== "if")) {
          if (this._script[_l] === "otherwise" && this._script[_l + 1] !== "if") {
            this.__stamps[this._stamps[this._stamps.length - 1]] = _l;
            this._stamps.pop();
          }
          results.push(this._stamps.push(_l));
        } else if ((this._script[_l] === "end" || this._script[_l] === "otherwise") && (this._script[_l + 1] === "if" || this._script[_l + 1] === "while")) {
          this.__stamps[this._stamps[this._stamps.length - 1]] = _l;
          results.push(this._stamps.pop());
        } else {
          results.push(void 0);
        }
      }
      return results;
    };
    this._parse = function(_b, _c) {
      var _r, _r2;
      _r = 0;
      _r2 = 0;
      if (_b < _c.length - 1) {
        _r = this._parse(_b + 1, _c);
      } else if (_b < _c.length + 1) {
        if (this._script[this._pt] === "(") {
          this._pt++;
          _r = this._parse(0, _c);
          this._pt++;
        } else if (this._script[this._pt] !== void 0) {
          if (this._script[this._pt].charAt(0) === "\"") {
            _r = this._script[this._pt].split("\\s").join(" ").split("\\n").join("\n").slice(1, -1);
          } else if (this._script[this._pt] === "true") {
            _r = true;
          } else if (this._script[this._pt] === "false") {
            _r = false;
          } else if (isNaN(Number(this._script[this._pt].charAt(0)))) {
            _r = this._variables[this._pvar(this._script[this._pt])];
          } else {
            _r = Number(this._script[this._pt]);
          }
          this._pt++;
        }
      }
      while (this._script[this._pt] === _c[_b]) {
        switch (_c[_b]) {
          case "+":
            this._pt++;
            _r2 = this._parse(_b + 1, _c);
            _r = _r + _r2;
            break;
          case "-":
            this._pt++;
            _r2 = this._parse(_b + 1, _c);
            _r = _r - _r2;
            break;
          case "*":
            this._pt++;
            _r2 = this._parse(_b + 1, _c);
            _r = _r * _r2;
            break;
          case "/":
            this._pt++;
            _r2 = this._parse(_b + 1, _c);
            _r = _r / _r2;
            break;
          case "%":
            this._pt++;
            _r2 = this._parse(_b + 1, _c);
            _r = _r % _r2;
            break;
          case "==":
            this._pt++;
            _r2 = this._parse(_b + 1, _c);
            _r = _r === _r2;
            break;
          case "!=":
            this._pt++;
            _r2 = this._parse(_b + 1, _c);
            _r = _r !== _r2;
            break;
          case "<":
            this._pt++;
            _r2 = this._parse(_b + 1, _c);
            _r = _r < _r2;
            break;
          case ">":
            this._pt++;
            _r2 = this._parse(_b + 1, _c);
            _r = _r > _r2;
            break;
          case "<=":
            this._pt++;
            _r2 = this._parse(_b + 1, _c);
            _r = _r <= _r2;
            break;
          case ">=":
            this._pt++;
            _r2 = this._parse(_b + 1, _c);
            _r = _r >= _r2;
            break;
          case "and":
            this._pt++;
            _r2 = this._parse(_b + 1, _c);
            _r = _r && _r2;
            break;
          case "or":
            this._pt++;
            _r2 = this._parse(_b + 1, _c);
            _r = _r || _r2;
        }
      }
      return _r;
    };
    this._compile = function(__script, _s, _f) {
      var __continue, __plist, __val, _c, results;
      __val = void 0;
      __continue = false;
      __plist = ["or", "and", ">=", "<=", ">", "<", "!=", "==", "+", "-", "*", "/", "%", ""];
      _c = _s - 1;
      results = [];
      while (_c < _f - 1) {
        _c++;
        switch (__script[_c]) {
          case "as":
            if (__script[_c + 1] === "whole" && __script[_c + 2] === "number") {
              this.__types[this._pvar(__script[_c - 1])] = "integer";
            } else if (__script[_c + 1] === "real") {
              this.__types[this._pvar(__script[_c - 1])] = "decimal";
            } else if (__script[_c + 1] === "string") {
              this.__types[this._pvar(__script[_c - 1])] = "string";
            } else {
              alert("Invalid Data Type: " + __script[_c + 1]);
            }
            break;
          case "=":
            this._pt = _c + 1;
            __val = this._parse(0, __plist);
            if (typeof __val === "string" && this.__types[this._pvar(this._script[_c - 1])] === "string") {

            } else if (typeof __val === "number" && this.__types[this._pvar(this._script[_c - 1])] === "integer" && __val === Math.floor(__val)) {

            } else if (typeof __val === "number" && this.__types[this._pvar(this._script[_c - 1])] === "decimal") {

            } else {
              alert("Invalid Data Type Assignment: " + __val);
            }
            this._variables[this._pvar(this._script[_c - 1])] = __val;
            break;
          case "if":
            if (__script[_c - 1] !== "end") {
              this._pt = _c + 1;
              __val = this._parse(0, __plist);
              this._if_value = __val;
              if (!__val) {
                _c = this.__stamps[_c] - 1;
              } else {
                this._if_value = true;
                _c = this._pt - 1;
              }
            }
            break;
          case "break":
            this._variables["break"] = true;
            __continue = true;
            break;
          case "continue":
            __continue = true;
            break;
          case "while":
            if (__script[_c - 1] !== "end") {
              while (this._variables["break"] === false) {
                this._pt = _c + 1;
                __val = this._parse(0, __plist);
                if (__val === true) {
                  this._compile(this._script, this._pt, this.__stamps[_c]);
                } else {
                  _c = this.__stamps[_c] - 1;
                  break;
                }
              }
            }
            if (this._variables["break"]) {
              _c = this.__stamps[_c];
              this._variables["break"] = false;
            }
            break;
          case "otherwise":
            if (__script[_c + 1] === "if") {
              this._pt = _c + 2;
              __val = this._parse(0, __plist);
              if (this._if_value === true || !__val) {
                _c = this.__stamps[_c + 1] - 1;
              } else {
                this._if_value = true;
                _c = this._pt - 1;
              }
            } else {
              if (this._if_value === true) {
                _c = this.__stamps[_c] - 1;
              }
            }
            break;
          case "output":
            this._pt = _c + 1;
            __val = this._parse(0, __plist);
            EKMDP_Field.innerHTML += "<p>" + __val + "</p><br>";
            break;
          case "input":
            this._icache = prompt("Input: " + this._pvar(this._script[_c + 1]));
            if (this.__types[this._pvar(this._script[_c + 1])] === "integer") {
              this._icache = Math.floor(Number(this._icache));
            } else if (this.__types[this._pvar(this._script[_c + 1])] === "decimal") {
              this._icache = Number(this._icache);
            } else if (this.__types[this._pvar(this._script[_c + 1])] === "string") {
              this._icache = this._icache;
            }
            this._variables[this._pvar(this._script[_c + 1])] = this._icache;
        }
        if (__continue) {
          break;
        } else {
          results.push(void 0);
        }
      }
      return results;
    };
    return this;
  };

  ekmdp = new EKMDP();

  ekmdp._lex();

  ekmdp._compile(ekmdp._script, 0, ekmdp._script.length);

